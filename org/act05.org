#+SETUPFILE: base-template.org
#+TITLE:    Estimation de la moyenne
#+SUBTITLE:     Activités #5
#+PROPERTY: header-args :results output replace :exports none
* Pour mieux comprendre
  [[file:act05/cm-PSI-R-Chabot.pdf][Traitement de données avec R : initiation aux méthodes exploratoires]]. Simon Chabot.
* Application web shiny
** Installer les extensions
   Installez d'abord l'extension requise.
   #+BEGIN_SRC R :exports code :results output silent
     install.packages("shiny") ## pour l'application web
   #+END_SRC
   N'hésitez pas à parcourir l'[[https://shiny.rstudio.com/tutorial/written-tutorial/lesson1/][introduction]] à shiny.

   Installez ensuite l'extension suggérée. Continuez même si l'installation échoue.
   #+BEGIN_SRC R :exports code :results output silent
     install.packages("ggplot2") ## pour les graphiques
   #+END_SRC

** Obtenir le code de l'application

   Ensuite, téléchargez le fichier [[file:act05/app-PSI.R][app-PSI.R]] contenant le code de l'application, et exécutez le.
   #+BEGIN_SRC R :exports code
    app <- source('app-PSI.R') ## construire l'application web
    app ## lancer l'application web dans un navigateur
   #+END_SRC
   Pour l'instant, l'application fonctionne mais n'affiche rien d'intéressant.


** Compléter le code de l'application
   Votre mission consiste à écrire les quatre fonctions ci-dessous.
   La spécification des fonctions est précisée dans les sections suivantes.

   #+BEGIN_SRC R :exports code :tangle act05/app-PSI.R
     #' SummaryPSI est une fonction calculant des statistiques a partir d'une série d'observations.
     #' @param x le vecteur numérique d'observations
     #' @return un vecteur numérique nommé contenant des indicateurs statistiques.
     SummaryPSI <- function(x) {
       ## TODO
       return(c("N"=0))
     }

     #' HistPSI est une fonction construisant un histogramme d'une série d'observations.
     #' @param x le vecteur numérique d'observations
     #' @return un histogramme construit avec ggplot2
     HistPSI <- function(x, main, binwidth=0.5) {
       ## TODO
       if(require("ggplot2")) {
         ## ggplot est installé.
         qplot(c(), geom="histogram")
       } else {
         ## ggplot n'est pas installé.
         ## On utilise les graphes de 'base'.
         hist(0:10)
       }
     }

     #' SampleMean renvoie la moyenne d'un sous-échantillon aléatoire de taille size d'un vecteur x.
     #' @param x le vecteur numérique d'observations
     #' @param size le nombre d'observations du sous-échantillon
     #' @return la moyenne du sous-échantillon
     SampleMean <- function(x, size) {
       ## TODO
       return(0)
     }

     #' SampleMeans renvoie un vecteur de longueur n dont les éléments sont des estimations de la moyenne basées sur un échantillon aléatoire de taille size.
     #' @param x le vecteur numérique d'observations
     #' @param n le nombre de sous-échantillons
     #' @param size le nombre d'observations du sous-échantillon
     #' @return les moyennes des sous-échantillons
     SampleMeans <- function(x, n, size) {
       ## TODO
       return(0)
     }
   #+END_SRC

   #+BEGIN_SRC R :tangle act05/app-PSI.R
     library(shiny)
     #' La fonction server d'une application shiny réalise le traitement des données et la génération des graphiques/tableaux.
     server <- function(input, output) {
       ## Vecteur réactif des observations qui dépend du fichier de données.
       rtemp <- reactive({
         ## Validation du fichier de données
         validate(
           need(!is.null(input$tempfile), "Choisir un fichier CSV")
         )
         ## Lecture du fichier de données dans un vecteur
         scan(file = input$tempfile$datapath, quiet = TRUE)
       })


       ## Vecteur réactif des moyennes des sous-échantillons qui dépend du fichier de données et des entrées dans l'application.
       rmean <- reactive({
         ## Validation des entrées saisies dans l'application.
         validate(
           need(input$sampleCount > 0, "Nombre d'échantillons négatif ou nul"),
           need(input$sampleSize > 0, "Taille d'échantillon négative ou nul")
         )
         ## Calcul des moyennes des sous-échantillons
         SampleMeans(rtemp(), input$sampleCount, input$sampleSize)
       })

       ## Une petite fonction utilitaire pour construire un tableau
       renderTablePSI <- function(x) {
         renderTable(
           SummaryPSI(x()),
           striped = TRUE, hover = TRUE, bordered = FALSE,
           spacing = "m", width = "auto", align = NULL,
           rownames = TRUE, colnames = FALSE
         )
       }

       ## Tableau récapitulatif des températures
       output$summaryTemp <- renderTablePSI(rtemp)
       ## Histogramme des températures
       output$histTemp <- renderPlot(
         HistPSI(rtemp(), "Histogramme des températures")
       )

       ## Tableau récapitulatif des moyennes estimées
       output$summaryMean <- renderTablePSI(rmean)
       ## Histogramme des moyennes estimées
       output$histMean <- renderPlot(
         HistPSI(rmean(), "Histogramme des moyennes estimées", binwidth=0.125)
       )
     }

     #' La fonction server d'une application shiny construit l'interface graphique à partir de ses entrées/sorties.
     ui <- fluidPage(
       sidebarLayout(
         ## Barre latérale contenant les entrées de l'application
         sidebarPanel(
           fileInput(
             "tempfile", "Choisir un fichier CSV",
             accept = c(
               "text/csv",
                 "text/comma-separated-values,text/plain",
               ".csv")
           ),
           numericInput("sampleCount", label = h3("Nombre d'échantillons"), min = 1, value = 100),
           numericInput("sampleSize", label = h3("Taille de l'échantillon"), min = 1, value = 10),
           width = 2
         ),
         ## Panneau principal contenant les sorties de l'application
         mainPanel(
           column(3, tableOutput("summaryTemp")),
           column(7, plotOutput("histTemp")),
           column(3, tableOutput("summaryMean")),
           column(7, plotOutput("histMean"))
         )
       )
     )
     ## Construit un objet représentant l'application
     shinyApp(ui = ui, server = server)
   #+END_SRC

* Description de données
Cet exercice a pour but d'introduire aux outils de statistiques descriptives d'une seule variable (moyenne, quartiles, histogramme, etc.).
Les étapes proposées dans cet exercice sont nécessaires pour décrire un ensemble de données impliquant une seule variable.
3 fichiers sont disponibles : [[file:act05/temp1.csv][temp1.csv]], [[file:act05/temp2.csv][temp2.csv]] et [[file:act05/temp3.csv][temp3.csv]].
Chaque fichier contient les mesures de température de centaines de thermomètres au même instant.
Les observations peuvent donc être considérées comme indépendantes.

  1. Calculer le nombre de données, la moyenne, la variance, l'écart-type et les quartiles.
  2. Décrire qualitativement la distribution des températures mesurées à l'aide d'un histogramme.


  #+BEGIN_SRC R

    SummaryPSI <- function(x) {
      c(
        "N"=length(x),
        "Moyenne"=mean(x),
        "Écart-type"=sd(x),
        "Variance"=var(x),
        quantile(x)
      )
    }

    HistPSI <- function(x, main, binwidth=0.5) {
      if(require("ggplot2")) {
        qplot(
          x,
          geom="histogram",
          binwidth = binwidth,
          main = main,
          xlab = "Temperature", ylab="Fréquence"
        )
      } else {
        hist(
          x,
          include.lowest = FALSE,
          breaks = (diff(range(x)) / binwidth) + 1,
          main = main,
          xlab = "Temperature", ylab="Fréquence"
        )
      }
    }
  #+END_SRC

* Influence de la taille d'un échantillon
  Cet exercice a pour but de montrer comment l'estimation de la moyenne dépend de la taille de l'échantillon (nombre d'observations) sur lequel repose l'estimation.
  Nous allons extraire des sous-échantillons (aléatoires) de différentes tailles et montrer que la dispersion des moyennes observées dépend de cette taille.
  Cet exercice est une illustration de la loi faible des grands nombres.

 1. Ecrire une fonction ~SampleMean~ qui calcule la moyenne d'un sous-échantillon de taille ~size~ d'un vecteur ~x~.
 2. Ecrire une fonction ~SampleMeans~ qui calcule un vecteur de longueur ~n~ dont les éléments sont des estimations de la moyenne basées sur un échantillon aléatoire de taille ~size~.
 3. Comparer les distributions des moyennes estimées pour des échantillons de taille 10 et de taille 100.

 #+BEGIN_SRC R
   SampleMean <- function(x, size) mean(sample(x, size))
   SampleMeans <- function(x, n, size) replicate(n, SampleMean(x, size))
 #+END_SRC

* Comparaison de moyenne
  Cet exercice a pour but d'illustrer les outils de comparaison de moyennes à l'aide de tests statistiques.

  1. Les mesures de températures suivent-elles une distribution normale ? Quel(s) test(s) peut-on utiliser pour comparer les moyennes de ces distributions ?
  2. Comparer les moyennes estimées sur les 1000 observations des 3 séries de données à l'aide d'un test statistique adéquat.
  3. Comparer de nouveau, à l'aide d'un test statistique, les moyennes des 3 séries de données à partir de sous-échantillons aléatoires de taille 30.
